이 파일은 백신 엔진 보안을 위해 태어났습니다.
백신 엔진은 백신의 모든 처리를 책임지며, 이 명령으로 인해 시스템에 영향을 줍니다.

그러므로, 백신의 코어는 보호되어야하며, 사용자가 사용하면서 악의적인 접근이 존재해서는 안됩니다.


그 결과, RC4알고리즘과 RSA 알고리즘을 사용한 보안모듈이 탄생했으며,
이 파일들은 윈도우즈 환경뿐만 아니라 리눅스, 유닉스에서도 호환됩니다.


보안 모듈의 구조는 대략 3개의 폴더로 이루어집니다.

    1. FoxRC4
    2. FoxRSA
    3. FoxCryptionTools


위 2개의 폴더에는(FoxRC4, FoxRSA) 암호화를 위한 알고리즘이 파이썬 2.7 기반으로 작성되어 있으며,


FoxCryptionTools 폴더에는 각 모듈을 보호하기 위한 자동화 도구들이 내장되어 있습니다.

    1. FoxCrypto라는 도구는 백신커널을 위해 RSA 개인키와 공개키를 생성하고 관리하는 역활을 맡습니다.
    2. FvcTimeLib는 백신의 플러그인 앤진들에게 가장 최신 시간/날짜값을 부여합니다.
    3. 이상의 모듈들이 추가될 수 있습니다.




보안 모듈 개발 이의:

    1. 당시 백신이 막 개발되던 시기에 카스퍼스키 백신 엔진의 악성코드 패턴이 한 해커에게 분석되어, 스푸핑공격을 당한 적이 있었습니다. 당시 카스퍼스키 백신 엔진은 이를 알아채지 못했고, 덕분에 큰 피해를 입게 되었습니다.
    2. 또한 최근에 Alz로 유명한 알 컴퍼니에서 개발한 ‘알약’ 이 뚫린적이 있습니다. 비록 사회공학기법으로 해킹되긴했어도, 철저한 암호화를 통한 모듈 보호로 사회공학 해킹을 통한 소스코드 유출과 같은 사건에서 유동적으로 대처할 수 있게 대비해야하기에, 모듈 보호가 필수적입니다.


고로, 제 FoxVc은 이러한 방식을 채택했습니다.

    1. 각 플러그인 엔진은 Fxm(FoXkeyMake)라는 확장자를 가진 파일로 암호화됩니다.
    2. 각 모듈들은 fxm -> pyc -> py로 변환되어 백신에 사용됩니다.
    3. 구체적으로 말하긴 뭣하지만,
    4. 복호화 과정에 일어나는 임시파일(*.pyc)을 시스템에 남기는 것은 상당히 위험하다고 판단되어..
    5. 메모리에 로딩하여 -> 복호화 하는 과정을 거칩니다.
    6. 해커가 마음만 먹는다면 이도 뚫리겠지만,
    7. FoxVc은 오픈소스라는 전제 조건이 있기 때문에, 그래도, 직접 메모리에 로딩되는 암/복호화 과정을 통해 스크립트 키디와 같은 프로그래밍, 해킹 및 보안 지식이 적은 해커들의 공격을 피할 수 있으리라 생각되어 채택하게 되었습니다.